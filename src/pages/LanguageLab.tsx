import { useState } from 'react'
import { useNavigate } from 'react-router-dom'

export default function LanguageLab() {
  const [selectedLanguage, setSelectedLanguage] = useState('en')
  const [learningMode, setLearningMode] = useState('vocabulary')
  const [currentWord, setCurrentWord] = useState(0)
  const [showAnswer, setShowAnswer] = useState(false)
  const [score, setScore] = useState(0)
  const [totalQuestions, setTotalQuestions] = useState(0)
  const navigate = useNavigate()

  const languages = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏', native: '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞' },
    { code: 'de', name: 'Deutsch', flag: 'üá©üá™', native: '–ù—ñ–º–µ—Ü—å–∫–∞' },
    { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑', native: '–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏', native: '–Ü—Å–ø–∞–Ω—Å—å–∫–∞' },
    { code: 'it', name: 'Italiano', flag: 'üáÆüáπ', native: '–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞' }
  ]

  const learningModes = [
    { id: 'vocabulary', name: '–°–ª–æ–≤–Ω–∏–∫', icon: 'üìö', description: '–í–∏–≤—á–∞–π—Ç–µ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞ —Ç–∞ —Ñ—Ä–∞–∑–∏' },
    { id: 'grammar', name: '–ì—Ä–∞–º–∞—Ç–∏–∫–∞', icon: 'üìù', description: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞' },
    { id: 'conversation', name: '–†–æ–∑–º–æ–≤–∞', icon: 'üí¨', description: '–î—ñ–∞–ª–æ–≥–∏ —Ç–∞ –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω—ñ —Ñ—Ä–∞–∑–∏' },
    { id: 'pronunciation', name: '–í–∏–º–æ–≤–∞', icon: 'üó£Ô∏è', description: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤–∏–º–æ–≤—É' }
  ]

  // –ü—Ä–∏–∫–ª–∞–¥ —Å–ª—ñ–≤ –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
  const vocabularyData = {
    en: [
      { word: 'Hello', translation: '–ü—Ä–∏–≤—ñ—Ç', example: 'Hello, how are you?' },
      { word: 'Goodbye', translation: '–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è', example: 'Goodbye, see you later!' },
      { word: 'Thank you', translation: '–î—è–∫—É—é', example: 'Thank you for your help.' },
      { word: 'Please', translation: '–ë—É–¥—å –ª–∞—Å–∫–∞', example: 'Please, can you help me?' },
      { word: 'Sorry', translation: '–í–∏–±–∞—á—Ç–µ', example: 'Sorry, I am late.' }
    ]
  }

  const currentLanguageData = languages.find(lang => lang.code === selectedLanguage)
  const currentWords = vocabularyData[selectedLanguage as keyof typeof vocabularyData] || vocabularyData.en

  const startLearning = () => {
    setCurrentWord(0)
    setScore(0)
    setTotalQuestions(currentWords.length)
    setShowAnswer(false)
  }

  const nextWord = () => {
    if (currentWord < currentWords.length - 1) {
      setCurrentWord(currentWord + 1)
      setShowAnswer(false)
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
      setCurrentWord(0)
      setShowAnswer(false)
    }
  }

  const checkAnswer = (isCorrect: boolean) => {
    if (isCorrect) {
      setScore(score + 1)
    }
    setShowAnswer(true)
  }

  const progress = (currentWord / currentWords.length) * 100

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-20">
      <div className="max-w-6xl mx-auto px-6">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-5xl md:text-6xl font-bold text-slate-900 mb-6">
            <span className="bg-gradient-to-r from-emerald-500 to-teal-600 bg-clip-text text-transparent">
              –ú–æ–≤–Ω–∞ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è
            </span>
          </h1>
          <p className="text-xl text-slate-600 max-w-3xl mx-auto">
            –í–∏–≤—á–∞–π—Ç–µ —ñ–Ω–æ–∑–µ–º–Ω—ñ –º–æ–≤–∏ –∑ AI-–ø–æ–º—ñ—á–Ω–∏–∫–æ–º. –°—Ç–≤–æ—Ä—é–π—Ç–µ —Ñ–ª–µ—à–∫–∞—Ä—Ç–∫–∏, –ø—Ä–æ—Ö–æ–¥—å—Ç–µ —Ç–µ—Å—Ç–∏ —Ç–∞ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–æ–∑–º–æ–≤–Ω—É –º–æ–≤—É.
          </p>
        </div>

        {/* Language Selection */}
        <div className="bg-white/80 backdrop-blur-xl border border-white/50 rounded-3xl shadow-2xl p-8 mb-12">
          <h2 className="text-2xl font-bold text-slate-900 mb-6 text-center">–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
            {languages.map((language) => (
              <button
                key={language.code}
                onClick={() => setSelectedLanguage(language.code)}
                className={`p-6 rounded-2xl border-2 transition-all duration-300 text-center hover:scale-105 ${
                  selectedLanguage === language.code
                    ? 'border-emerald-500 bg-emerald-50 shadow-lg'
                    : 'border-slate-200 hover:border-slate-300'
                }`}
              >
                <div className="text-4xl mb-3">{language.flag}</div>
                <div className="font-semibold text-slate-900">{language.name}</div>
                <div className="text-sm text-slate-600">{language.native}</div>
              </button>
            ))}
          </div>
        </div>

        {/* Learning Mode Selection */}
        <div className="bg-white/80 backdrop-blur-xl border border-white/50 rounded-3xl shadow-2xl p-8 mb-12">
          <h2 className="text-2xl font-bold text-slate-900 mb-6 text-center">–†–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {learningModes.map((mode) => (
              <button
                key={mode.id}
                onClick={() => setLearningMode(mode.id)}
                className={`p-6 rounded-2xl border-2 transition-all duration-300 text-center hover:scale-105 ${
                  learningMode === mode.id
                    ? 'border-teal-500 bg-teal-50 shadow-lg'
                    : 'border-slate-200 hover:border-slate-300'
                }`}
              >
                <div className="text-4xl mb-3">{mode.icon}</div>
                <div className="font-semibold text-slate-900 mb-2">{mode.name}</div>
                <div className="text-sm text-slate-600">{mode.description}</div>
              </button>
            ))}
          </div>
        </div>

        {/* Learning Interface */}
        {learningMode === 'vocabulary' && (
          <div className="bg-white/80 backdrop-blur-xl border border-white/50 rounded-3xl shadow-2xl p-8">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-bold text-slate-900 mb-4">
                –í–∏–≤—á–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞: {currentLanguageData?.name}
              </h3>
              <div className="flex items-center justify-center gap-6 text-slate-600 mb-6">
                <span className="flex items-center gap-2">
                  <span className="text-lg">üìö</span>
                  {currentWords.length} —Å–ª—ñ–≤
                </span>
                <span className="flex items-center gap-2">
                  <span className="text-lg">üéØ</span>
                  {score} –∑ {totalQuestions} –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                </span>
              </div>
              
              {/* Progress Bar */}
              <div className="w-full max-w-md mx-auto bg-slate-200 rounded-full h-3 mb-6">
                <div 
                  className="h-full bg-gradient-to-r from-emerald-500 to-teal-600 rounded-full transition-all duration-500"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>

              {totalQuestions === 0 && (
                <button
                  onClick={startLearning}
                  className="px-8 py-4 bg-gradient-to-r from-emerald-500 to-teal-600 text-white font-semibold rounded-2xl shadow-2xl hover:shadow-emerald-500/25 transition-all duration-300 transform hover:scale-105"
                >
                  <span className="text-2xl mr-3">üöÄ</span>
                  –ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
                </button>
              )}
            </div>

            {/* Word Display */}
            {totalQuestions > 0 && (
              <div className="max-w-2xl mx-auto">
                <div className="bg-gradient-to-r from-slate-50 to-blue-50 rounded-3xl p-12 text-center mb-8">
                  <div className="text-6xl mb-6">üìñ</div>
                  <h4 className="text-3xl font-bold text-slate-900 mb-4">
                    {currentWords[currentWord].word}
                  </h4>
                  
                  {showAnswer ? (
                    <div className="space-y-4">
                      <p className="text-xl text-slate-700">
                        <span className="font-semibold">–ü–µ—Ä–µ–∫–ª–∞–¥:</span> {currentWords[currentWord].translation}
                      </p>
                      <p className="text-lg text-slate-600">
                        <span className="font-semibold">–ü—Ä–∏–∫–ª–∞–¥:</span> {currentWords[currentWord].example}
                      </p>
                    </div>
                  ) : (
                    <p className="text-lg text-slate-600">
                      –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥" —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    </p>
                  )}
                </div>

                {/* Controls */}
                <div className="flex items-center justify-center gap-4">
                  {!showAnswer ? (
                    <button
                      onClick={() => setShowAnswer(true)}
                      className="px-8 py-4 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-semibold rounded-2xl shadow-2xl hover:shadow-cyan-500/25 transition-all duration-300 transform hover:scale-105"
                    >
                      –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥
                    </button>
                  ) : (
                    <div className="flex gap-4">
                      <button
                        onClick={() => checkAnswer(true)}
                        className="px-6 py-3 bg-emerald-500 text-white font-medium rounded-xl hover:bg-emerald-600 transition-colors duration-300"
                      >
                        –ó–Ω–∞—é ‚úÖ
                      </button>
                      <button
                        onClick={() => checkAnswer(false)}
                        className="px-6 py-3 bg-red-500 text-white font-medium rounded-xl hover:bg-red-600 transition-colors duration-300"
                      >
                        –ù–µ –∑–Ω–∞—é ‚ùå
                      </button>
                      <button
                        onClick={nextWord}
                        className="px-6 py-3 bg-slate-500 text-white font-medium rounded-xl hover:bg-slate-600 transition-colors duration-300"
                      >
                        –î–∞–ª—ñ ‚Üí
                      </button>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Other Learning Modes Placeholder */}
        {learningMode !== 'vocabulary' && (
          <div className="bg-white/80 backdrop-blur-xl border border-white/50 rounded-3xl shadow-2xl p-8 text-center">
            <div className="text-6xl mb-6">üöß</div>
            <h3 className="text-2xl font-bold text-slate-900 mb-4">
              {learningModes.find(m => m.id === learningMode)?.name} - –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ
            </h3>
            <p className="text-slate-600 mb-6">
              –¶–µ–π —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!
            </p>
            <button
              onClick={() => setLearningMode('vocabulary')}
              className="px-6 py-3 bg-gradient-to-r from-emerald-500 to-teal-600 text-white font-medium rounded-xl hover:from-emerald-600 hover:to-teal-700 transition-all duration-300"
            >
              –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫
            </button>
          </div>
        )}

        {/* Back to Home */}
        <div className="text-center mt-12">
          <button
            onClick={() => navigate('/')}
            className="px-8 py-4 text-lg font-medium text-slate-600 bg-white/60 backdrop-blur-xl border border-slate-200 rounded-2xl hover:bg-white/80 transition-all duration-300"
          >
            ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
          </button>
        </div>
      </div>
    </div>
  )
}
